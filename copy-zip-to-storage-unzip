#!/bin/bash
# Azure CLI script to upload and extract zip files from a folder to blob storage
# Running from Azure compute instance - uses managed identity authentication
# Usage: ./script.sh [folder_range]
# Examples: 
#   ./script.sh           # Process all zip files
#   ./script.sh 100-102   # Process folder100.zip, folder101.zip, folder102.zip
#   ./script.sh 50        # Process only folder50.zip

# Configuration
STORAGE_ACCOUNT="your_storage_account_name"
CONTAINER_NAME="your_container_name"
ZIP_FOLDER_PATH="/path/to/your/zip/files/folder"
TEMP_EXTRACT_DIR="/tmp/extracted_files"

# Set SAS token (get from Azure portal or generate programmatically)
export AZURE_STORAGE_SAS_TOKEN="your_sas_token_here"

# Parse folder range parameter
FOLDER_RANGE=""
if [ $# -gt 0 ]; then
    FOLDER_RANGE="$1"
    echo "Processing folder range: $FOLDER_RANGE"
fi

# Function to check if a zip file matches the folder range criteria
matches_folder_range() {
    local zip_file=$1
    local filename=$(basename "$zip_file" .zip)
    
    # If no range specified, process all files
    if [ -z "$FOLDER_RANGE" ]; then
        return 0
    fi
    
    # Extract number from filename (assuming format like "folder123.zip")
    local folder_num=$(echo "$filename" | grep -o '[0-9]\+$')
    
    # If no number found in filename, skip this file
    if [ -z "$folder_num" ]; then
        return 1
    fi
    
    # Parse range
    if [[ "$FOLDER_RANGE" == *"-"* ]]; then
        # Range format: "100-102"
        local start_num=$(echo "$FOLDER_RANGE" | cut -d'-' -f1)
        local end_num=$(echo "$FOLDER_RANGE" | cut -d'-' -f2)
        
        # Check if folder number is within range
        if [ "$folder_num" -ge "$start_num" ] && [ "$folder_num" -le "$end_num" ]; then
            return 0
        else
            return 1
        fi
    else
        # Single number format: "100"
        if [ "$folder_num" -eq "$FOLDER_RANGE" ]; then
            return 0
        else
            return 1
        fi
    fi
}

# Function to upload and extract zip file
upload_and_extract_zip() {
    local zip_file=$1
    local container=$2
    local storage_account=$3
    
    echo "Processing zip file: $zip_file"
    
    # Create unique temporary directory for this zip file
    local temp_dir="${TEMP_EXTRACT_DIR}/$(basename "$zip_file" .zip)"
    mkdir -p "$temp_dir"
    
    # Extract zip file
    echo "Extracting zip file..."
    unzip -q "$zip_file" -d "$temp_dir"
    
    if [ $? -eq 0 ]; then
        # Get zip filename without extension for folder structure
        zip_basename=$(basename "$zip_file" .zip)
        
        # Check if extraction created a single root folder with same name as zip
        local extracted_items=($(ls -1 "$temp_dir"))
        local upload_source="$temp_dir"
        local destination_path="$zip_basename"
        
        if [ ${#extracted_items[@]} -eq 1 ] && [ -d "$temp_dir/${extracted_items[0]}" ] && [ "${extracted_items[0]}" = "$zip_basename" ]; then
            echo "Detected single root folder with same name as zip - avoiding duplicate path"
            # Upload contents of the inner folder directly
            upload_source="$temp_dir/${extracted_items[0]}"
            destination_path="$zip_basename"
        fi
        
        # Upload extracted files to blob storage
        echo "Uploading files to blob storage..."
        az storage blob upload-batch \
            --destination "$container" \
            --source "$upload_source" \
            --destination-path "$destination_path" \
            --account-name "$storage_account"
        
        if [ $? -eq 0 ]; then
            echo "Successfully uploaded and extracted: $zip_file"
        else
            echo "Error uploading files from: $zip_file"
        fi
    else
        echo "Error extracting zip file: $zip_file"
    fi
    
    # Clean up temporary directory for this zip
    rm -rf "$temp_dir"
}

# Check if zip folder exists
if [ ! -d "$ZIP_FOLDER_PATH" ]; then
    echo "Error: ZIP folder does not exist: $ZIP_FOLDER_PATH"
    exit 1
fi

# Create container if it doesn't exist
echo "Creating container if it doesn't exist..."
az storage container create \
    --name "$CONTAINER_NAME" \
    --account-name "$STORAGE_ACCOUNT"

# Create main temp directory
mkdir -p "$TEMP_EXTRACT_DIR"

# Count and collect matching zip files
matching_files=()
for zip_file in "$ZIP_FOLDER_PATH"/*.zip; do
    if [ -f "$zip_file" ] && matches_folder_range "$zip_file"; then
        matching_files+=("$zip_file")
    fi
done

zip_count=${#matching_files[@]}

if [ -z "$FOLDER_RANGE" ]; then
    echo "Found $zip_count zip files to process (all files)"
else
    echo "Found $zip_count zip files matching range '$FOLDER_RANGE'"
fi

if [ $zip_count -eq 0 ]; then
    if [ -z "$FOLDER_RANGE" ]; then
        echo "No zip files found in: $ZIP_FOLDER_PATH"
    else
        echo "No zip files found matching range '$FOLDER_RANGE' in: $ZIP_FOLDER_PATH"
    fi
    exit 1
fi

# Process matching zip files
for zip_file in "${matching_files[@]}"; do
    upload_and_extract_zip "$zip_file" "$CONTAINER_NAME" "$STORAGE_ACCOUNT"
done

# Clean up main temp directory
rm -rf "$TEMP_EXTRACT_DIR"

if [ -z "$FOLDER_RANGE" ]; then
    echo "Script completed successfully - processed $zip_count zip files"
else
    echo "Script completed successfully - processed $zip_count zip files matching range '$FOLDER_RANGE'"
fi
